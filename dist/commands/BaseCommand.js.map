{
  "version": 3,
  "sources": [
    "../../src/commands/BaseCommand.js"
  ],
  "names": [
    "RESPONSE_SCHEMA_SYMBOL",
    "BaseCommand",
    "requestSchema",
    "responseSchema",
    "values",
    "constructor",
    "name",
    "payload",
    "response"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;AAEA,IAAMA,yBAAyB,sBAAO,gBAAP,CAA/B;;IAGMC,W;AACJ,uBAAaC,aAAb,EAA4BC,cAA5B,EAA4CC,MAA5C,EAAoD;AAAA;;AAClD,SAAKJ,sBAAL,IAA+BG,cAA/B;;AAEA,QAAID,aAAJ,EAAmB;AACjB,8CAA0B,IAA1B,EAAgCA,aAAhC,EAA+CE,MAA/C;AACD;AACF;;;;qCAEiB;AAChB,aAAO,KAAKC,WAAL,CAAiBC,IAAxB;AACD;;;mCAEeC,O,EAAS;AACvB,UAAMC,WAAW,IAAI,YAAY,CAChC,CADgB,EAAjB;;AAGA,UAAI,KAAKR,sBAAL,CAAJ,EAAkC;AAChC,gDAA0BQ,QAA1B,EAAoC,KAAKR,sBAAL,CAApC,EAAkEO,OAAlE;AACD;;AAED,aAAOC,QAAP;AACD;;;;;kBAtBGP,W",
  "file": "BaseCommand.js",
  "sourcesContent": [
    "import {applyPropertiesValidators} from '../helpers';\n\nconst RESPONSE_SCHEMA_SYMBOL = Symbol('responseSchema');\n\nexport default\nclass BaseCommand {\n  constructor (requestSchema, responseSchema, values) {\n    this[RESPONSE_SCHEMA_SYMBOL] = responseSchema;\n\n    if (requestSchema) {\n      applyPropertiesValidators(this, requestSchema, values);\n    }\n  }\n\n  getCommandName () {\n    return this.constructor.name;\n  }\n\n  createResponse (payload) {\n    const response = new function () {\n    }();\n\n    if (this[RESPONSE_SCHEMA_SYMBOL]) {\n      applyPropertiesValidators(response, this[RESPONSE_SCHEMA_SYMBOL], payload);\n    }\n\n    return response;\n  }\n}\n"
  ]
}
