{
  "version": 3,
  "sources": [
    "../src/centralSystem.js"
  ],
  "names": [
    "debug",
    "CentralSystem",
    "options",
    "clients",
    "port",
    "host",
    "validateConnection",
    "wsOptions",
    "handleProtocols",
    "protocols",
    "req",
    "location",
    "map",
    "proto",
    "toLowerCase",
    "indexOf",
    "verifyClient",
    "info",
    "cb",
    "user",
    "url",
    "headers",
    "isAccept",
    "code",
    "message",
    "server",
    "Server",
    "on",
    "ws",
    "console",
    "onNewConnection",
    "socket",
    "err",
    "readyState",
    "connection",
    "client",
    "onRequest",
    "command",
    "index",
    "splice",
    "push"
  ],
  "mappings": "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",
  "file": "centralSystem.js",
  "sourcesContent": [
    "import WebSocket from 'ws';\nimport debugFn from 'debug';\nimport {Connection} from './connection';\nimport {DEBUG_LIBNAME, OCPP_PROTOCOL_1_6} from './constants';\nimport CentralSystemClient from './centralSystemClient';\n\nimport auth from 'basic-auth';\n\nconst debug = debugFn(DEBUG_LIBNAME);\n\nexport default class CentralSystem {\n  constructor(options) {\n    this.options = options || {};\n    this.clients = [];\n  }\n\n  listen (port = 9220, host = null) {\n    this.port = port;\n\n    const validateConnection = this.options.validateConnection || (() => [true]);\n\n    const wsOptions = {\n      port,\n      host,\n      handleProtocols: (protocols, req) => {\n        let location = protocols.map(proto => proto.toLowerCase()).indexOf(OCPP_PROTOCOL_1_6);\n        if (location === -1) {\n          return '';\n        }\n        return protocols[location];\n      },\n      verifyClient: async (info, cb) => {\n        const user = auth(info.req);\n        let [isAccept, code, message] = await validateConnection(info.req.url, user, info.req.headers['x-forwarded-proto'] || 'http');\n\n        if (!code){\n          code = 404;\n        }\n        if (!message){\n          message = 'Central System does not recognize the charge point identifier in the URL path';\n        }\n        debug(`Request for connect \"${info.req.url}\" (${info.req.headers['sec-websocket-protocol']}) - ${isAccept ? 'Valid identifier' : 'Invalid identifier'}`);\n\n        cb(isAccept, code, message);\n      },\n      ...(this.options.wsOptions || {})\n    };\n\n    this.server = new WebSocket.Server(wsOptions);\n\n    this.server.on('error', (ws, req) => {\n      console.info(ws, req);\n    });\n\n    this.server.on('upgrade', (ws, req) => {\n      console.info(req);\n    });\n    this.server.on('connection', (ws, req) => this.onNewConnection(ws, req));\n\n    debug(`Listen on ${host || 'default host'}:${port}`);\n  }\n\n  onNewConnection (socket, req) {\n    socket.on('error', (err) => {\n      console.info(err, socket.readyState);\n    });\n\n    // if (!socket.protocol) {\n    //   // From Spec: If the Central System does not agree to using one of the subprotocols offered by the client,\n    //   // it MUST complete the WebSocket handshake with a response without a Sec-WebSocket-Protocol header and then\n    //   // immediately close the WebSocket connection.\n    //   debug(`Close connection due to unsupported protocol`);\n    //   return socket.close();\n    // }\n\n    const connection = new Connection(socket, req);\n\n    const client = new CentralSystemClient(connection);\n\n    connection.onRequest = (command) => this.onRequest(client, command);\n\n    socket.on('close', (err) => {\n      debug(err);\n      const index = this.clients.indexOf(client);\n      this.clients.splice(index, 1);\n    });\n    this.clients.push(client);\n  }\n\n  async onRequest (client, command) {\n    // implementation\n  }\n}\n"
  ]
}
